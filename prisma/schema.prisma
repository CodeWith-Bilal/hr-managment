// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  Password  String
  role      Role     @default(EMPLOYEE)
  profilePicture String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  EMPLOYEE
}

model Employee {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  address           String?
  appointmentLetter String?
  city              String?
  department        String?
  designation       String?
  email             String  @unique
  emailAddress      String?
  employeeId        String?
  employmentType    String?
  experienceLetter  String?
  firstName         String?
  gender            String
  githubId          String?
  joiningDate       String?
  lastName          String?
  maritalStatus     String?
  mobileNumber      String?
  nationality       String?
  officeLocation    String?
  photoURL          String?
  relivingLetter    String?
  salarySlip        String?
  skypeId           String?
  slackId           String?
  state             String?
  userName          String?
  workingDays       String?
  zipCode           String?
  dateOfBirth       String?
  attendances       Attendance[]
  leaves            Leave[]
  type              String?
  status           String?
   photoPublicId String?
}
model Attendance {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId   String   @db.ObjectId
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  checkIn      DateTime
  checkOut     DateTime
  breakTime    String?
  workingHours String?
  status       AttendanceStatus
  date         DateTime // New Date Field
  createdAt    DateTime @default(now())
}

enum AttendanceStatus {
  ON_TIME
  LATE
  ABSENT
  LEAVE
}

enum Status {
  ON_TIME
  LATE
  ABSENT
  LEAVE
}

model Leave {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  employeeId    String      @db.ObjectId
  employee      Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  reason        String
  startDate     DateTime
  endDate       DateTime
  status        LeaveStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}
