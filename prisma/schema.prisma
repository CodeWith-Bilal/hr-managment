// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String         @unique
  Password       String
  role           Role           @default(EMPLOYEE)
  profilePicture String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  notifications  Notification[] @relation("UserNotifications")
}

enum Role {
  ADMIN
  EMPLOYEE
}

model Employee {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  address           String?
  appointmentLetter String?
  city              String?
  department        String?
  designation       String?
  email             String       @unique
  emailAddress      String?
  employeeId        String?
  employmentType    String?
  experienceLetter  String?
  firstName         String?
  gender            String
  githubId          String?
  joiningDate       String?
  lastName          String?
  maritalStatus     String?
  mobileNumber      String?
  nationality       String?
  officeLocation    String?
  photoURL          String?
  relivingLetter    String?
  salarySlip        String?
  skypeId           String?
  slackId           String?
  state             String?
  userName          String?
  workingDays       String?
  zipCode           String?
  dateOfBirth       String?
  attendances       Attendance[]
  leaves            Leave[]
  projects          Project[]
  type              String?
  status            String?
  photoPublicId     String?
}

model Attendance {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  employeeId   String           @db.ObjectId
  employee     Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  checkIn      DateTime
  checkOut     DateTime
  breakTime    String?
  workingHours String?
  status       AttendanceStatus
  date         DateTime // New Date Field
  createdAt    DateTime         @default(now())
}

enum AttendanceStatus {
  ON_TIME
  LATE
  ABSENT
  LEAVE
}

enum Status {
  ON_TIME
  LATE
  ABSENT
  LEAVE
}

model Leave {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String      @db.ObjectId
  employee   Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  startDate  DateTime
  endDate    DateTime
  reason     String?
  status     LeaveStatus @default(PENDING) // Pending, Approved, Rejected
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  message   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  user      User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  // user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String?
  assignedEmployeeId String        @db.ObjectId
  assignedEmployee   Employee      @relation(fields: [assignedEmployeeId], references: [id], onDelete: Cascade)
  status             ProjectStatus @default(IN_PROGRESS)
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}


// Enum for project status
enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
}
